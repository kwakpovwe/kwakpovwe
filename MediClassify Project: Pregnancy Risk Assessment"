{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "mRFIZJrdSq1m"
      ],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyMG3tSXh6uZRC8ld86UFvjN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kwakpovwe/kwakpovwe/blob/main/Introduction_to_Neural_Networks_with_Keras.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "              #\"MediClassify Project: Pregnancy Risk Assessment\""
      ],
      "metadata": {
        "id": "JrR-b74Q2g6y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "3nyL0mxI2dXx"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#5)Having uploaded the dataset, we can now use the read_csv function to read it into a pandas dataframe. We can then inspect the first and last rows."
      ],
      "metadata": {
        "id": "m7RwuT5khiOV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cardio_data = pd.read_csv('Cardiotocographic.csv')"
      ],
      "metadata": {
        "id": "fiem1w8ihz5w"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##We can also explore the data  "
      ],
      "metadata": {
        "id": "mpOYNX3SiYu4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cardio_data = pd.read_csv('Cardiotocographic.csv')\n",
        "\n",
        "cardio_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "sn1gqtXefnU2",
        "outputId": "6daf5d5c-57c6-46bf-a50a-a33390c8779e"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   BPM       APC  FMPS      UCPS      DLPS  SDPS  PDPS  ASTV  MSTV  ALTV  \\\n",
              "0  120  0.000000   0.0  0.000000  0.000000   0.0   0.0    73   0.5    43   \n",
              "1  132  0.006380   0.0  0.006380  0.003190   0.0   0.0    17   2.1     0   \n",
              "2  133  0.003322   0.0  0.008306  0.003322   0.0   0.0    16   2.1     0   \n",
              "3  134  0.002561   0.0  0.007682  0.002561   0.0   0.0    16   2.4     0   \n",
              "4  132  0.006515   0.0  0.008143  0.000000   0.0   0.0    16   2.4     0   \n",
              "\n",
              "   MLTV  Width  Min  Max  NSP  \n",
              "0   2.4     64   62  126    2  \n",
              "1  10.4    130   68  198    1  \n",
              "2  13.4    130   68  198    1  \n",
              "3  23.0    117   53  170    1  \n",
              "4  19.9    117   53  170    1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a8fc558b-e1da-448e-8025-59fb528822aa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BPM</th>\n",
              "      <th>APC</th>\n",
              "      <th>FMPS</th>\n",
              "      <th>UCPS</th>\n",
              "      <th>DLPS</th>\n",
              "      <th>SDPS</th>\n",
              "      <th>PDPS</th>\n",
              "      <th>ASTV</th>\n",
              "      <th>MSTV</th>\n",
              "      <th>ALTV</th>\n",
              "      <th>MLTV</th>\n",
              "      <th>Width</th>\n",
              "      <th>Min</th>\n",
              "      <th>Max</th>\n",
              "      <th>NSP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>120</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>73</td>\n",
              "      <td>0.5</td>\n",
              "      <td>43</td>\n",
              "      <td>2.4</td>\n",
              "      <td>64</td>\n",
              "      <td>62</td>\n",
              "      <td>126</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>132</td>\n",
              "      <td>0.006380</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.006380</td>\n",
              "      <td>0.003190</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>17</td>\n",
              "      <td>2.1</td>\n",
              "      <td>0</td>\n",
              "      <td>10.4</td>\n",
              "      <td>130</td>\n",
              "      <td>68</td>\n",
              "      <td>198</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>133</td>\n",
              "      <td>0.003322</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.008306</td>\n",
              "      <td>0.003322</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16</td>\n",
              "      <td>2.1</td>\n",
              "      <td>0</td>\n",
              "      <td>13.4</td>\n",
              "      <td>130</td>\n",
              "      <td>68</td>\n",
              "      <td>198</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>134</td>\n",
              "      <td>0.002561</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.007682</td>\n",
              "      <td>0.002561</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16</td>\n",
              "      <td>2.4</td>\n",
              "      <td>0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>117</td>\n",
              "      <td>53</td>\n",
              "      <td>170</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>132</td>\n",
              "      <td>0.006515</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.008143</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>16</td>\n",
              "      <td>2.4</td>\n",
              "      <td>0</td>\n",
              "      <td>19.9</td>\n",
              "      <td>117</td>\n",
              "      <td>53</td>\n",
              "      <td>170</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a8fc558b-e1da-448e-8025-59fb528822aa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a8fc558b-e1da-448e-8025-59fb528822aa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a8fc558b-e1da-448e-8025-59fb528822aa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cafc9136-d141-4573-86e4-a3b9d95af7dc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cafc9136-d141-4573-86e4-a3b9d95af7dc')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cafc9136-d141-4573-86e4-a3b9d95af7dc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cardio_data.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "7VDyylsriz1A",
        "outputId": "9a5884e0-57b0-47e5-8d64-94302976412a"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      BPM       APC      FMPS      UCPS  DLPS  SDPS  PDPS  ASTV  MSTV  ALTV  \\\n",
              "2121  140  0.000000  0.000000  0.007426   0.0   0.0   0.0    79   0.2    25   \n",
              "2122  140  0.000775  0.000000  0.006971   0.0   0.0   0.0    78   0.4    22   \n",
              "2123  140  0.000980  0.000000  0.006863   0.0   0.0   0.0    79   0.4    20   \n",
              "2124  140  0.000679  0.000000  0.006110   0.0   0.0   0.0    78   0.4    27   \n",
              "2125  142  0.001616  0.001616  0.008078   0.0   0.0   0.0    74   0.4    36   \n",
              "\n",
              "      MLTV  Width  Min  Max  NSP  \n",
              "2121   7.2     40  137  177    2  \n",
              "2122   7.1     66  103  169    2  \n",
              "2123   6.1     67  103  170    2  \n",
              "2124   7.0     66  103  169    2  \n",
              "2125   5.0     42  117  159    1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-07d9f350-6c56-4223-aa54-746702a4495b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BPM</th>\n",
              "      <th>APC</th>\n",
              "      <th>FMPS</th>\n",
              "      <th>UCPS</th>\n",
              "      <th>DLPS</th>\n",
              "      <th>SDPS</th>\n",
              "      <th>PDPS</th>\n",
              "      <th>ASTV</th>\n",
              "      <th>MSTV</th>\n",
              "      <th>ALTV</th>\n",
              "      <th>MLTV</th>\n",
              "      <th>Width</th>\n",
              "      <th>Min</th>\n",
              "      <th>Max</th>\n",
              "      <th>NSP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2121</th>\n",
              "      <td>140</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.007426</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>79</td>\n",
              "      <td>0.2</td>\n",
              "      <td>25</td>\n",
              "      <td>7.2</td>\n",
              "      <td>40</td>\n",
              "      <td>137</td>\n",
              "      <td>177</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2122</th>\n",
              "      <td>140</td>\n",
              "      <td>0.000775</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.006971</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>78</td>\n",
              "      <td>0.4</td>\n",
              "      <td>22</td>\n",
              "      <td>7.1</td>\n",
              "      <td>66</td>\n",
              "      <td>103</td>\n",
              "      <td>169</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2123</th>\n",
              "      <td>140</td>\n",
              "      <td>0.000980</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.006863</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>79</td>\n",
              "      <td>0.4</td>\n",
              "      <td>20</td>\n",
              "      <td>6.1</td>\n",
              "      <td>67</td>\n",
              "      <td>103</td>\n",
              "      <td>170</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2124</th>\n",
              "      <td>140</td>\n",
              "      <td>0.000679</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.006110</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>78</td>\n",
              "      <td>0.4</td>\n",
              "      <td>27</td>\n",
              "      <td>7.0</td>\n",
              "      <td>66</td>\n",
              "      <td>103</td>\n",
              "      <td>169</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2125</th>\n",
              "      <td>142</td>\n",
              "      <td>0.001616</td>\n",
              "      <td>0.001616</td>\n",
              "      <td>0.008078</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>74</td>\n",
              "      <td>0.4</td>\n",
              "      <td>36</td>\n",
              "      <td>5.0</td>\n",
              "      <td>42</td>\n",
              "      <td>117</td>\n",
              "      <td>159</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-07d9f350-6c56-4223-aa54-746702a4495b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-07d9f350-6c56-4223-aa54-746702a4495b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-07d9f350-6c56-4223-aa54-746702a4495b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bf6afcd5-4950-41d5-a0b1-e43b2b07b369\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bf6afcd5-4950-41d5-a0b1-e43b2b07b369')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bf6afcd5-4950-41d5-a0b1-e43b2b07b369 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cardio_data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "ZZ_rQiRDizxa",
        "outputId": "487112de-ab6f-4e24-801a-ab5334cfd859"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               BPM          APC         FMPS         UCPS         DLPS  \\\n",
              "count  2126.000000  2126.000000  2126.000000  2126.000000  2126.000000   \n",
              "mean    133.303857     0.003170     0.009474     0.004357     0.001885   \n",
              "std       9.840844     0.003860     0.046670     0.002940     0.002962   \n",
              "min     106.000000     0.000000     0.000000     0.000000     0.000000   \n",
              "25%     126.000000     0.000000     0.000000     0.001876     0.000000   \n",
              "50%     133.000000     0.001630     0.000000     0.004482     0.000000   \n",
              "75%     140.000000     0.005631     0.002512     0.006525     0.003264   \n",
              "max     160.000000     0.019284     0.480634     0.014925     0.015385   \n",
              "\n",
              "              SDPS         PDPS         ASTV         MSTV        ALTV  \\\n",
              "count  2126.000000  2126.000000  2126.000000  2126.000000  2126.00000   \n",
              "mean      0.000004     0.000157    46.990122     1.332785     9.84666   \n",
              "std       0.000063     0.000580    17.192814     0.883241    18.39688   \n",
              "min       0.000000     0.000000    12.000000     0.200000     0.00000   \n",
              "25%       0.000000     0.000000    32.000000     0.700000     0.00000   \n",
              "50%       0.000000     0.000000    49.000000     1.200000     0.00000   \n",
              "75%       0.000000     0.000000    61.000000     1.700000    11.00000   \n",
              "max       0.001353     0.005348    87.000000     7.000000    91.00000   \n",
              "\n",
              "              MLTV        Width          Min          Max          NSP  \n",
              "count  2126.000000  2126.000000  2126.000000  2126.000000  2126.000000  \n",
              "mean      8.187629    70.445908    93.579492   164.025400     1.304327  \n",
              "std       5.628247    38.955693    29.560212    17.944183     0.614377  \n",
              "min       0.000000     3.000000    50.000000   122.000000     1.000000  \n",
              "25%       4.600000    37.000000    67.000000   152.000000     1.000000  \n",
              "50%       7.400000    67.500000    93.000000   162.000000     1.000000  \n",
              "75%      10.800000   100.000000   120.000000   174.000000     1.000000  \n",
              "max      50.700000   180.000000   159.000000   238.000000     3.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-09b2e285-54f6-41e8-aebd-dad5440d22ac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BPM</th>\n",
              "      <th>APC</th>\n",
              "      <th>FMPS</th>\n",
              "      <th>UCPS</th>\n",
              "      <th>DLPS</th>\n",
              "      <th>SDPS</th>\n",
              "      <th>PDPS</th>\n",
              "      <th>ASTV</th>\n",
              "      <th>MSTV</th>\n",
              "      <th>ALTV</th>\n",
              "      <th>MLTV</th>\n",
              "      <th>Width</th>\n",
              "      <th>Min</th>\n",
              "      <th>Max</th>\n",
              "      <th>NSP</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.00000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "      <td>2126.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>133.303857</td>\n",
              "      <td>0.003170</td>\n",
              "      <td>0.009474</td>\n",
              "      <td>0.004357</td>\n",
              "      <td>0.001885</td>\n",
              "      <td>0.000004</td>\n",
              "      <td>0.000157</td>\n",
              "      <td>46.990122</td>\n",
              "      <td>1.332785</td>\n",
              "      <td>9.84666</td>\n",
              "      <td>8.187629</td>\n",
              "      <td>70.445908</td>\n",
              "      <td>93.579492</td>\n",
              "      <td>164.025400</td>\n",
              "      <td>1.304327</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.840844</td>\n",
              "      <td>0.003860</td>\n",
              "      <td>0.046670</td>\n",
              "      <td>0.002940</td>\n",
              "      <td>0.002962</td>\n",
              "      <td>0.000063</td>\n",
              "      <td>0.000580</td>\n",
              "      <td>17.192814</td>\n",
              "      <td>0.883241</td>\n",
              "      <td>18.39688</td>\n",
              "      <td>5.628247</td>\n",
              "      <td>38.955693</td>\n",
              "      <td>29.560212</td>\n",
              "      <td>17.944183</td>\n",
              "      <td>0.614377</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>106.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>122.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>126.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.001876</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>0.700000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>4.600000</td>\n",
              "      <td>37.000000</td>\n",
              "      <td>67.000000</td>\n",
              "      <td>152.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>133.000000</td>\n",
              "      <td>0.001630</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.004482</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>1.200000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>7.400000</td>\n",
              "      <td>67.500000</td>\n",
              "      <td>93.000000</td>\n",
              "      <td>162.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>140.000000</td>\n",
              "      <td>0.005631</td>\n",
              "      <td>0.002512</td>\n",
              "      <td>0.006525</td>\n",
              "      <td>0.003264</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>61.000000</td>\n",
              "      <td>1.700000</td>\n",
              "      <td>11.00000</td>\n",
              "      <td>10.800000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>174.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>160.000000</td>\n",
              "      <td>0.019284</td>\n",
              "      <td>0.480634</td>\n",
              "      <td>0.014925</td>\n",
              "      <td>0.015385</td>\n",
              "      <td>0.001353</td>\n",
              "      <td>0.005348</td>\n",
              "      <td>87.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>91.00000</td>\n",
              "      <td>50.700000</td>\n",
              "      <td>180.000000</td>\n",
              "      <td>159.000000</td>\n",
              "      <td>238.000000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09b2e285-54f6-41e8-aebd-dad5440d22ac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-09b2e285-54f6-41e8-aebd-dad5440d22ac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-09b2e285-54f6-41e8-aebd-dad5440d22ac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6b747e54-441d-4c84-9a42-283e5e11681b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6b747e54-441d-4c84-9a42-283e5e11681b')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6b747e54-441d-4c84-9a42-283e5e11681b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cardio_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E4dBukPUizj4",
        "outputId": "52bde3c3-9bff-4a85-d4e2-a8c149eac9ae"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2126 entries, 0 to 2125\n",
            "Data columns (total 15 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   BPM     2126 non-null   int64  \n",
            " 1   APC     2126 non-null   float64\n",
            " 2   FMPS    2126 non-null   float64\n",
            " 3   UCPS    2126 non-null   float64\n",
            " 4   DLPS    2126 non-null   float64\n",
            " 5   SDPS    2126 non-null   float64\n",
            " 6   PDPS    2126 non-null   float64\n",
            " 7   ASTV    2126 non-null   int64  \n",
            " 8   MSTV    2126 non-null   float64\n",
            " 9   ALTV    2126 non-null   int64  \n",
            " 10  MLTV    2126 non-null   float64\n",
            " 11  Width   2126 non-null   int64  \n",
            " 12  Min     2126 non-null   int64  \n",
            " 13  Max     2126 non-null   int64  \n",
            " 14  NSP     2126 non-null   int64  \n",
            "dtypes: float64(8), int64(7)\n",
            "memory usage: 249.3 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cardio_data.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OTsZZAUqjAlu",
        "outputId": "5d243fe3-de8a-4666-f697-1cef3c4140c3"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2126, 15)"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cardio_data['NSP'].value_counts()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bl5ipqijjAii",
        "outputId": "ef1bc5d0-dd7a-45d2-943c-03b439ff5add"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    1655\n",
              "2     295\n",
              "3     176\n",
              "Name: NSP, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#We can see we have imbalanced classes with 77.8% of the observations belong to the Normal class. We can also use the seaborn countplot to visualise this"
      ],
      "metadata": {
        "id": "ZRn5cO53kqJN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Using Seaborn to Visualize the Count-Plot\n",
        "\n",
        "sns.countplot(cardio_data, x=\"NSP\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "6sYnWEemlpOB",
        "outputId": "7992fd67-226f-436e-d102-0f59bcb0bcbe"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='NSP', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming 'cardio_data' is your DataFrame\n",
        "value_counts = cardio_data['NSP'].value_counts()\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.bar(value_counts.index, value_counts.values)\n",
        "plt.xlabel('NSP Values')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Count of NSP Values')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "W8lwgr0Slazt",
        "outputId": "3e0e1bf1-30d1-4d24-b19e-342b945c0f7c"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 7 ##Next, i am going to use the train_test_split from Scikit Learn to divide the data into a training dataset and a test dataset. Normalising the data is important when training a neural network. Not doing so may mean it takes longer to converge during training or fails to converge at all. In this workshop we will use the StandardScaler estimator from Scikit Learn. This scales the data so that the mean of each variable is 0, and the standard deviation is"
      ],
      "metadata": {
        "id": "PQiY0jA6nuMg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "**We also deduct 1 from the values of the class labels in the NSP column. This is because Keras assumes our class labels start at 0, whereas on page 5 you can see that for this dataset the class labels are 1, 2 and 3. Once we have deducted 1, class 0 is Normal, class 1 is Suspect, and class 2 is Pathologic**\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "6Y6Oi0ypFuk5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = cardio_data.drop('NSP', axis=1)\n",
        "y = cardio_data['NSP'] -1"
      ],
      "metadata": {
        "id": "qKv5fPIUGC_9"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test =train_test_split(x, y, test_size = 0.2, stratify=y, random_state=0)\n",
        "\n",
        "scaler =StandardScaler()\n",
        "x_train = scaler.fit_transform(x_train)\n",
        "x_test = scaler.transform(x_test)"
      ],
      "metadata": {
        "id": "VWtD4kOHGe9W"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Part Two:\n",
        "**Building and Training Our Neural Network\n",
        "We're now ready to build our neural network. We do this using a Keras Sequential model which allows us to build up our neural network layer by layer**\n",
        "\n",
        "\n",
        "#8 - instantiating the model\n",
        "**We do this by, **and then using the ‘add’ method to add layers to the model.\n",
        "When adding a layer, we need to specify what type of layer we are adding. In a simple feedforward network, we use a ‘Dense’ layer, which means each neuron in the layer is connected to each neuron in the previous layer**"
      ],
      "metadata": {
        "id": "5R9DDoRUH2Gq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = tf.keras.models.Sequential()\n",
        "model.add(tf.keras.layers.Dense(9, activation='relu', input_shape=(14,)))\n",
        "model.add(tf.keras.layers.Dense(3, activation='softmax'))"
      ],
      "metadata": {
        "id": "261Cv75UIcmx"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**For each layer, i have specify the number of neurons it is going to contain, and the activation function we want to use for that layer. Notice, for the first layer we define the input shape. We set this to 14 as there are 14 input variables in the data.**\n",
        "\n",
        "*   **14 Input Variables**\n",
        "\n"
      ],
      "metadata": {
        "id": "yJVhrin0LhA7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**In the final layer, the number of neurons should be equal to the number of classes we have for our target variable. In this case we have three classes (Normal, Suspect and Pathologic), so we have three neurons in the final layer. For a multiclass classification problem, we use a softmax activation function in the final layer. This activation function ensures that the total value across the output neurons sums to 1, meaning we can interpret the output for each neuron as the probability that the observation belongs to that class**\n",
        "\n",
        "\n",
        "* **we use a softmax activation function in the final layer**\n",
        "\n",
        "\n",
        "* **This activation function ensures that the total value across the output neurons sums to 1, meaning we can interpret the output for each neuron as the probability that the observation belongs to that class**\n",
        "\n"
      ],
      "metadata": {
        "id": "IPzxbdkdLz22"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#9 - Compile the model\n",
        "\n",
        "The next step is to compile the model. At this stage, we have to select an optimizer and a loss function: At this stage, we have to select an optimizer and a loss function:\n",
        "\n",
        "• **The optimizer** is a function which determines how fast the network ‘learns’ – i.e., how quickly it updates the weights in the network. If it’s too sensitive, it will update the weights too much based on the current training examples, meaning the values jump around and it doesn’t converge. If it’s not sensitive enough, it will take much longer to train. A common optimizer is **Adam.**\n",
        "\n",
        "• **The loss is a function** which is used to calculate how big the error is in the neural network’s predictions. When it is being trained, the weights in the neural network are updated to try and minimize the loss. Categorical cross entropy is typically the loss function we use for classification."
      ],
      "metadata": {
        "id": "nLscjZwEQwB1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer='adam',\n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics='accuracy')"
      ],
      "metadata": {
        "id": "GdN_JyR1Rm84"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#9 - Summary of the neural network\n",
        "\n",
        "We can use summary() to view a summary of the neural network we have built."
      ],
      "metadata": {
        "id": "mRFIZJrdSq1m"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zgAxXYC8S36Q",
        "outputId": "12b6e2bf-a22d-4f6b-f12c-fe35fe1a8081"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_3 (Dense)             (None, 9)                 135       \n",
            "                                                                 \n",
            " dense_4 (Dense)             (None, 3)                 30        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 165 (660.00 Byte)\n",
            "Trainable params: 165 (660.00 Byte)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#9 - Similar to the way we train a model in Scikit Learn, we use the fit method to train the model. At this stage we can set the following parameters:\n",
        "\n",
        "\n",
        "• Batch_size: This is the number of training examples which are fed through the network in one go before updating the weights.\n",
        "\n",
        "• Epochs: In one epoch, all the training data is passed through the network once.\n",
        "\n",
        "• Verbose: This determines how much information we are given on the training and setting this to 2 outputs more detailed information as we go through the training.\n",
        "\n",
        "• validation_split: This determines how much data is left out of the training data and used to calculate the validation metrics during each epoch."
      ],
      "metadata": {
        "id": "kKFx3ZGaTSv7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#On page 12, we noted that we have imbalanced classes. Because we have imbalanced classes,\n",
        "#there are many more observations of the class 0, and so this will have a larger impact on the overall value of the loss function than observations belonging to the other two classes. In practice, this is likely to mean the resulting trained model may be more accurate at correctly identifying observations in class 0 than in the other two classes.\n",
        "\n",
        "\n",
        "#We can address this when training by weighting the classes in inverse proportion to the % of observations in that class. We use the class_weights parameter to do this.\n"
      ],
      "metadata": {
        "id": "9BtazXqUbQ0z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class_weights ={0:1, 1:6.5, 2:9.4}\n",
        "\n",
        "history =model.fit(x_train, y_train, \\\n",
        "                   batch_size= 32, epochs =100, \\\n",
        "                   verbose=2, class_weight=class_weights, \\\n",
        "                   validation_split= 0.2)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VqVWSEyLaIcz",
        "outputId": "5ebabaf5-f660-4caa-f8be-efa37c1e0451"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "43/43 - 1s - loss: 3.6987 - accuracy: 0.4515 - val_loss: 1.1979 - val_accuracy: 0.4088 - 1s/epoch - 25ms/step\n",
            "Epoch 2/100\n",
            "43/43 - 0s - loss: 3.0459 - accuracy: 0.4279 - val_loss: 1.1308 - val_accuracy: 0.4118 - 141ms/epoch - 3ms/step\n",
            "Epoch 3/100\n",
            "43/43 - 0s - loss: 2.6893 - accuracy: 0.4581 - val_loss: 1.0511 - val_accuracy: 0.4853 - 152ms/epoch - 4ms/step\n",
            "Epoch 4/100\n",
            "43/43 - 0s - loss: 2.4487 - accuracy: 0.5257 - val_loss: 0.9663 - val_accuracy: 0.5853 - 164ms/epoch - 4ms/step\n",
            "Epoch 5/100\n",
            "43/43 - 0s - loss: 2.2443 - accuracy: 0.6199 - val_loss: 0.8906 - val_accuracy: 0.6647 - 159ms/epoch - 4ms/step\n",
            "Epoch 6/100\n",
            "43/43 - 0s - loss: 2.0410 - accuracy: 0.6669 - val_loss: 0.8243 - val_accuracy: 0.7176 - 164ms/epoch - 4ms/step\n",
            "Epoch 7/100\n",
            "43/43 - 0s - loss: 1.8746 - accuracy: 0.7110 - val_loss: 0.7656 - val_accuracy: 0.7500 - 192ms/epoch - 4ms/step\n",
            "Epoch 8/100\n",
            "43/43 - 0s - loss: 1.7510 - accuracy: 0.7412 - val_loss: 0.7132 - val_accuracy: 0.7765 - 148ms/epoch - 3ms/step\n",
            "Epoch 9/100\n",
            "43/43 - 0s - loss: 1.6548 - accuracy: 0.7618 - val_loss: 0.6665 - val_accuracy: 0.7941 - 151ms/epoch - 4ms/step\n",
            "Epoch 10/100\n",
            "43/43 - 0s - loss: 1.5753 - accuracy: 0.7772 - val_loss: 0.6288 - val_accuracy: 0.8206 - 155ms/epoch - 4ms/step\n",
            "Epoch 11/100\n",
            "43/43 - 0s - loss: 1.5094 - accuracy: 0.7904 - val_loss: 0.5974 - val_accuracy: 0.8294 - 144ms/epoch - 3ms/step\n",
            "Epoch 12/100\n",
            "43/43 - 0s - loss: 1.4526 - accuracy: 0.7956 - val_loss: 0.5697 - val_accuracy: 0.8324 - 165ms/epoch - 4ms/step\n",
            "Epoch 13/100\n",
            "43/43 - 0s - loss: 1.4037 - accuracy: 0.8081 - val_loss: 0.5445 - val_accuracy: 0.8412 - 151ms/epoch - 4ms/step\n",
            "Epoch 14/100\n",
            "43/43 - 0s - loss: 1.3633 - accuracy: 0.8154 - val_loss: 0.5210 - val_accuracy: 0.8500 - 149ms/epoch - 3ms/step\n",
            "Epoch 15/100\n",
            "43/43 - 0s - loss: 1.3244 - accuracy: 0.8213 - val_loss: 0.5023 - val_accuracy: 0.8441 - 142ms/epoch - 3ms/step\n",
            "Epoch 16/100\n",
            "43/43 - 0s - loss: 1.2907 - accuracy: 0.8272 - val_loss: 0.4871 - val_accuracy: 0.8471 - 179ms/epoch - 4ms/step\n",
            "Epoch 17/100\n",
            "43/43 - 0s - loss: 1.2606 - accuracy: 0.8287 - val_loss: 0.4787 - val_accuracy: 0.8500 - 144ms/epoch - 3ms/step\n",
            "Epoch 18/100\n",
            "43/43 - 0s - loss: 1.2324 - accuracy: 0.8309 - val_loss: 0.4665 - val_accuracy: 0.8529 - 148ms/epoch - 3ms/step\n",
            "Epoch 19/100\n",
            "43/43 - 0s - loss: 1.2080 - accuracy: 0.8353 - val_loss: 0.4556 - val_accuracy: 0.8559 - 175ms/epoch - 4ms/step\n",
            "Epoch 20/100\n",
            "43/43 - 0s - loss: 1.1833 - accuracy: 0.8346 - val_loss: 0.4484 - val_accuracy: 0.8618 - 162ms/epoch - 4ms/step\n",
            "Epoch 21/100\n",
            "43/43 - 0s - loss: 1.1614 - accuracy: 0.8404 - val_loss: 0.4408 - val_accuracy: 0.8647 - 197ms/epoch - 5ms/step\n",
            "Epoch 22/100\n",
            "43/43 - 0s - loss: 1.1420 - accuracy: 0.8426 - val_loss: 0.4351 - val_accuracy: 0.8618 - 143ms/epoch - 3ms/step\n",
            "Epoch 23/100\n",
            "43/43 - 0s - loss: 1.1252 - accuracy: 0.8390 - val_loss: 0.4290 - val_accuracy: 0.8618 - 189ms/epoch - 4ms/step\n",
            "Epoch 24/100\n",
            "43/43 - 0s - loss: 1.1046 - accuracy: 0.8471 - val_loss: 0.4186 - val_accuracy: 0.8618 - 157ms/epoch - 4ms/step\n",
            "Epoch 25/100\n",
            "43/43 - 0s - loss: 1.0891 - accuracy: 0.8426 - val_loss: 0.4186 - val_accuracy: 0.8618 - 157ms/epoch - 4ms/step\n",
            "Epoch 26/100\n",
            "43/43 - 0s - loss: 1.0719 - accuracy: 0.8441 - val_loss: 0.4107 - val_accuracy: 0.8618 - 149ms/epoch - 3ms/step\n",
            "Epoch 27/100\n",
            "43/43 - 0s - loss: 1.0576 - accuracy: 0.8485 - val_loss: 0.4046 - val_accuracy: 0.8559 - 149ms/epoch - 3ms/step\n",
            "Epoch 28/100\n",
            "43/43 - 0s - loss: 1.0433 - accuracy: 0.8441 - val_loss: 0.4043 - val_accuracy: 0.8588 - 151ms/epoch - 4ms/step\n",
            "Epoch 29/100\n",
            "43/43 - 0s - loss: 1.0304 - accuracy: 0.8515 - val_loss: 0.3973 - val_accuracy: 0.8588 - 164ms/epoch - 4ms/step\n",
            "Epoch 30/100\n",
            "43/43 - 0s - loss: 1.0207 - accuracy: 0.8471 - val_loss: 0.3965 - val_accuracy: 0.8588 - 153ms/epoch - 4ms/step\n",
            "Epoch 31/100\n",
            "43/43 - 0s - loss: 1.0073 - accuracy: 0.8493 - val_loss: 0.3959 - val_accuracy: 0.8588 - 153ms/epoch - 4ms/step\n",
            "Epoch 32/100\n",
            "43/43 - 0s - loss: 0.9982 - accuracy: 0.8500 - val_loss: 0.3914 - val_accuracy: 0.8588 - 162ms/epoch - 4ms/step\n",
            "Epoch 33/100\n",
            "43/43 - 0s - loss: 0.9929 - accuracy: 0.8493 - val_loss: 0.3885 - val_accuracy: 0.8618 - 151ms/epoch - 4ms/step\n",
            "Epoch 34/100\n",
            "43/43 - 0s - loss: 0.9801 - accuracy: 0.8507 - val_loss: 0.3827 - val_accuracy: 0.8588 - 149ms/epoch - 3ms/step\n",
            "Epoch 35/100\n",
            "43/43 - 0s - loss: 0.9738 - accuracy: 0.8522 - val_loss: 0.3796 - val_accuracy: 0.8618 - 146ms/epoch - 3ms/step\n",
            "Epoch 36/100\n",
            "43/43 - 0s - loss: 0.9658 - accuracy: 0.8500 - val_loss: 0.3807 - val_accuracy: 0.8588 - 153ms/epoch - 4ms/step\n",
            "Epoch 37/100\n",
            "43/43 - 0s - loss: 0.9623 - accuracy: 0.8529 - val_loss: 0.3786 - val_accuracy: 0.8588 - 187ms/epoch - 4ms/step\n",
            "Epoch 38/100\n",
            "43/43 - 0s - loss: 0.9509 - accuracy: 0.8522 - val_loss: 0.3776 - val_accuracy: 0.8647 - 140ms/epoch - 3ms/step\n",
            "Epoch 39/100\n",
            "43/43 - 0s - loss: 0.9430 - accuracy: 0.8529 - val_loss: 0.3731 - val_accuracy: 0.8647 - 149ms/epoch - 3ms/step\n",
            "Epoch 40/100\n",
            "43/43 - 0s - loss: 0.9382 - accuracy: 0.8515 - val_loss: 0.3745 - val_accuracy: 0.8647 - 184ms/epoch - 4ms/step\n",
            "Epoch 41/100\n",
            "43/43 - 0s - loss: 0.9292 - accuracy: 0.8529 - val_loss: 0.3712 - val_accuracy: 0.8676 - 140ms/epoch - 3ms/step\n",
            "Epoch 42/100\n",
            "43/43 - 0s - loss: 0.9234 - accuracy: 0.8537 - val_loss: 0.3705 - val_accuracy: 0.8647 - 191ms/epoch - 4ms/step\n",
            "Epoch 43/100\n",
            "43/43 - 0s - loss: 0.9208 - accuracy: 0.8566 - val_loss: 0.3657 - val_accuracy: 0.8588 - 158ms/epoch - 4ms/step\n",
            "Epoch 44/100\n",
            "43/43 - 0s - loss: 0.9116 - accuracy: 0.8566 - val_loss: 0.3702 - val_accuracy: 0.8588 - 145ms/epoch - 3ms/step\n",
            "Epoch 45/100\n",
            "43/43 - 0s - loss: 0.9087 - accuracy: 0.8551 - val_loss: 0.3638 - val_accuracy: 0.8559 - 144ms/epoch - 3ms/step\n",
            "Epoch 46/100\n",
            "43/43 - 0s - loss: 0.9043 - accuracy: 0.8559 - val_loss: 0.3653 - val_accuracy: 0.8588 - 156ms/epoch - 4ms/step\n",
            "Epoch 47/100\n",
            "43/43 - 0s - loss: 0.8976 - accuracy: 0.8551 - val_loss: 0.3620 - val_accuracy: 0.8529 - 267ms/epoch - 6ms/step\n",
            "Epoch 48/100\n",
            "43/43 - 0s - loss: 0.8917 - accuracy: 0.8574 - val_loss: 0.3593 - val_accuracy: 0.8588 - 267ms/epoch - 6ms/step\n",
            "Epoch 49/100\n",
            "43/43 - 0s - loss: 0.8885 - accuracy: 0.8581 - val_loss: 0.3639 - val_accuracy: 0.8618 - 246ms/epoch - 6ms/step\n",
            "Epoch 50/100\n",
            "43/43 - 0s - loss: 0.8815 - accuracy: 0.8618 - val_loss: 0.3584 - val_accuracy: 0.8618 - 244ms/epoch - 6ms/step\n",
            "Epoch 51/100\n",
            "43/43 - 0s - loss: 0.8815 - accuracy: 0.8603 - val_loss: 0.3609 - val_accuracy: 0.8559 - 217ms/epoch - 5ms/step\n",
            "Epoch 52/100\n",
            "43/43 - 0s - loss: 0.8737 - accuracy: 0.8581 - val_loss: 0.3616 - val_accuracy: 0.8559 - 233ms/epoch - 5ms/step\n",
            "Epoch 53/100\n",
            "43/43 - 0s - loss: 0.8695 - accuracy: 0.8603 - val_loss: 0.3579 - val_accuracy: 0.8588 - 233ms/epoch - 5ms/step\n",
            "Epoch 54/100\n",
            "43/43 - 0s - loss: 0.8652 - accuracy: 0.8618 - val_loss: 0.3588 - val_accuracy: 0.8618 - 248ms/epoch - 6ms/step\n",
            "Epoch 55/100\n",
            "43/43 - 0s - loss: 0.8611 - accuracy: 0.8632 - val_loss: 0.3566 - val_accuracy: 0.8618 - 241ms/epoch - 6ms/step\n",
            "Epoch 56/100\n",
            "43/43 - 0s - loss: 0.8573 - accuracy: 0.8625 - val_loss: 0.3583 - val_accuracy: 0.8588 - 216ms/epoch - 5ms/step\n",
            "Epoch 57/100\n",
            "43/43 - 0s - loss: 0.8560 - accuracy: 0.8610 - val_loss: 0.3565 - val_accuracy: 0.8529 - 168ms/epoch - 4ms/step\n",
            "Epoch 58/100\n",
            "43/43 - 0s - loss: 0.8511 - accuracy: 0.8610 - val_loss: 0.3554 - val_accuracy: 0.8588 - 145ms/epoch - 3ms/step\n",
            "Epoch 59/100\n",
            "43/43 - 0s - loss: 0.8455 - accuracy: 0.8625 - val_loss: 0.3567 - val_accuracy: 0.8588 - 154ms/epoch - 4ms/step\n",
            "Epoch 60/100\n",
            "43/43 - 0s - loss: 0.8439 - accuracy: 0.8654 - val_loss: 0.3581 - val_accuracy: 0.8588 - 153ms/epoch - 4ms/step\n",
            "Epoch 61/100\n",
            "43/43 - 0s - loss: 0.8389 - accuracy: 0.8647 - val_loss: 0.3558 - val_accuracy: 0.8588 - 145ms/epoch - 3ms/step\n",
            "Epoch 62/100\n",
            "43/43 - 0s - loss: 0.8354 - accuracy: 0.8654 - val_loss: 0.3518 - val_accuracy: 0.8559 - 143ms/epoch - 3ms/step\n",
            "Epoch 63/100\n",
            "43/43 - 0s - loss: 0.8329 - accuracy: 0.8632 - val_loss: 0.3546 - val_accuracy: 0.8618 - 269ms/epoch - 6ms/step\n",
            "Epoch 64/100\n",
            "43/43 - 0s - loss: 0.8302 - accuracy: 0.8654 - val_loss: 0.3547 - val_accuracy: 0.8618 - 146ms/epoch - 3ms/step\n",
            "Epoch 65/100\n",
            "43/43 - 0s - loss: 0.8312 - accuracy: 0.8691 - val_loss: 0.3530 - val_accuracy: 0.8559 - 214ms/epoch - 5ms/step\n",
            "Epoch 66/100\n",
            "43/43 - 0s - loss: 0.8286 - accuracy: 0.8684 - val_loss: 0.3542 - val_accuracy: 0.8618 - 152ms/epoch - 4ms/step\n",
            "Epoch 67/100\n",
            "43/43 - 0s - loss: 0.8216 - accuracy: 0.8647 - val_loss: 0.3555 - val_accuracy: 0.8588 - 215ms/epoch - 5ms/step\n",
            "Epoch 68/100\n",
            "43/43 - 0s - loss: 0.8179 - accuracy: 0.8676 - val_loss: 0.3551 - val_accuracy: 0.8618 - 170ms/epoch - 4ms/step\n",
            "Epoch 69/100\n",
            "43/43 - 0s - loss: 0.8165 - accuracy: 0.8676 - val_loss: 0.3561 - val_accuracy: 0.8618 - 210ms/epoch - 5ms/step\n",
            "Epoch 70/100\n",
            "43/43 - 0s - loss: 0.8117 - accuracy: 0.8676 - val_loss: 0.3529 - val_accuracy: 0.8559 - 260ms/epoch - 6ms/step\n",
            "Epoch 71/100\n",
            "43/43 - 0s - loss: 0.8093 - accuracy: 0.8669 - val_loss: 0.3535 - val_accuracy: 0.8588 - 254ms/epoch - 6ms/step\n",
            "Epoch 72/100\n",
            "43/43 - 0s - loss: 0.8106 - accuracy: 0.8684 - val_loss: 0.3523 - val_accuracy: 0.8588 - 258ms/epoch - 6ms/step\n",
            "Epoch 73/100\n",
            "43/43 - 0s - loss: 0.8033 - accuracy: 0.8647 - val_loss: 0.3558 - val_accuracy: 0.8588 - 293ms/epoch - 7ms/step\n",
            "Epoch 74/100\n",
            "43/43 - 0s - loss: 0.8016 - accuracy: 0.8669 - val_loss: 0.3511 - val_accuracy: 0.8588 - 268ms/epoch - 6ms/step\n",
            "Epoch 75/100\n",
            "43/43 - 0s - loss: 0.7981 - accuracy: 0.8676 - val_loss: 0.3549 - val_accuracy: 0.8588 - 270ms/epoch - 6ms/step\n",
            "Epoch 76/100\n",
            "43/43 - 0s - loss: 0.7967 - accuracy: 0.8669 - val_loss: 0.3511 - val_accuracy: 0.8588 - 235ms/epoch - 5ms/step\n",
            "Epoch 77/100\n",
            "43/43 - 0s - loss: 0.7963 - accuracy: 0.8691 - val_loss: 0.3527 - val_accuracy: 0.8588 - 243ms/epoch - 6ms/step\n",
            "Epoch 78/100\n",
            "43/43 - 0s - loss: 0.7940 - accuracy: 0.8691 - val_loss: 0.3531 - val_accuracy: 0.8618 - 250ms/epoch - 6ms/step\n",
            "Epoch 79/100\n",
            "43/43 - 0s - loss: 0.7900 - accuracy: 0.8721 - val_loss: 0.3542 - val_accuracy: 0.8588 - 358ms/epoch - 8ms/step\n",
            "Epoch 80/100\n",
            "43/43 - 0s - loss: 0.7892 - accuracy: 0.8706 - val_loss: 0.3504 - val_accuracy: 0.8559 - 323ms/epoch - 8ms/step\n",
            "Epoch 81/100\n",
            "43/43 - 0s - loss: 0.7863 - accuracy: 0.8699 - val_loss: 0.3522 - val_accuracy: 0.8559 - 210ms/epoch - 5ms/step\n",
            "Epoch 82/100\n",
            "43/43 - 0s - loss: 0.7809 - accuracy: 0.8699 - val_loss: 0.3514 - val_accuracy: 0.8559 - 147ms/epoch - 3ms/step\n",
            "Epoch 83/100\n",
            "43/43 - 0s - loss: 0.7814 - accuracy: 0.8699 - val_loss: 0.3509 - val_accuracy: 0.8559 - 145ms/epoch - 3ms/step\n",
            "Epoch 84/100\n",
            "43/43 - 0s - loss: 0.7827 - accuracy: 0.8706 - val_loss: 0.3507 - val_accuracy: 0.8588 - 144ms/epoch - 3ms/step\n",
            "Epoch 85/100\n",
            "43/43 - 0s - loss: 0.7747 - accuracy: 0.8706 - val_loss: 0.3531 - val_accuracy: 0.8559 - 159ms/epoch - 4ms/step\n",
            "Epoch 86/100\n",
            "43/43 - 0s - loss: 0.7724 - accuracy: 0.8721 - val_loss: 0.3506 - val_accuracy: 0.8559 - 142ms/epoch - 3ms/step\n",
            "Epoch 87/100\n",
            "43/43 - 0s - loss: 0.7695 - accuracy: 0.8706 - val_loss: 0.3505 - val_accuracy: 0.8559 - 141ms/epoch - 3ms/step\n",
            "Epoch 88/100\n",
            "43/43 - 0s - loss: 0.7684 - accuracy: 0.8684 - val_loss: 0.3510 - val_accuracy: 0.8559 - 151ms/epoch - 4ms/step\n",
            "Epoch 89/100\n",
            "43/43 - 0s - loss: 0.7667 - accuracy: 0.8706 - val_loss: 0.3501 - val_accuracy: 0.8559 - 139ms/epoch - 3ms/step\n",
            "Epoch 90/100\n",
            "43/43 - 0s - loss: 0.7650 - accuracy: 0.8699 - val_loss: 0.3514 - val_accuracy: 0.8559 - 143ms/epoch - 3ms/step\n",
            "Epoch 91/100\n",
            "43/43 - 0s - loss: 0.7630 - accuracy: 0.8713 - val_loss: 0.3536 - val_accuracy: 0.8588 - 145ms/epoch - 3ms/step\n",
            "Epoch 92/100\n",
            "43/43 - 0s - loss: 0.7593 - accuracy: 0.8676 - val_loss: 0.3528 - val_accuracy: 0.8588 - 153ms/epoch - 4ms/step\n",
            "Epoch 93/100\n",
            "43/43 - 0s - loss: 0.7573 - accuracy: 0.8713 - val_loss: 0.3502 - val_accuracy: 0.8618 - 140ms/epoch - 3ms/step\n",
            "Epoch 94/100\n",
            "43/43 - 0s - loss: 0.7574 - accuracy: 0.8706 - val_loss: 0.3524 - val_accuracy: 0.8559 - 140ms/epoch - 3ms/step\n",
            "Epoch 95/100\n",
            "43/43 - 0s - loss: 0.7562 - accuracy: 0.8721 - val_loss: 0.3505 - val_accuracy: 0.8559 - 162ms/epoch - 4ms/step\n",
            "Epoch 96/100\n",
            "43/43 - 0s - loss: 0.7555 - accuracy: 0.8699 - val_loss: 0.3549 - val_accuracy: 0.8529 - 146ms/epoch - 3ms/step\n",
            "Epoch 97/100\n",
            "43/43 - 0s - loss: 0.7544 - accuracy: 0.8721 - val_loss: 0.3545 - val_accuracy: 0.8559 - 141ms/epoch - 3ms/step\n",
            "Epoch 98/100\n",
            "43/43 - 0s - loss: 0.7494 - accuracy: 0.8684 - val_loss: 0.3553 - val_accuracy: 0.8529 - 148ms/epoch - 3ms/step\n",
            "Epoch 99/100\n",
            "43/43 - 0s - loss: 0.7477 - accuracy: 0.8706 - val_loss: 0.3511 - val_accuracy: 0.8588 - 155ms/epoch - 4ms/step\n",
            "Epoch 100/100\n",
            "43/43 - 0s - loss: 0.7464 - accuracy: 0.8713 - val_loss: 0.3549 - val_accuracy: 0.8529 - 141ms/epoch - 3ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#PART 3 - Evaluating Our Neural Network\n",
        "\n",
        "Now we have trained our neural network we want to review the accuracy and validation metrics and also see how this network performs when making predictions for the test data which we held back."
      ],
      "metadata": {
        "id": "QcgkMVbxcqo8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#(12)\n",
        "- Once the training has completed, we can plot the training and validation accuracy using the below code. The characteristic shape of this curve shows a steep increase in accuracy to start with, and then a more gradual increase in accuracy subsequently\n"
      ],
      "metadata": {
        "id": "RJEoROn-c-pS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy = history.history['accuracy']\n",
        "validation_accuracy = history.history['val_accuracy']\n",
        "\n",
        "plt.plot(accuracy, label='Training set Accuracy')\n",
        "plt.plot(validation_accuracy, label='Validation set Accuracy')  # Fixed the typo here\n",
        "plt.ylabel('Accuracy')\n",
        "plt.ylim([min(plt.ylim()), 1])\n",
        "plt.title('Training and Validation Accuracy Across Epochs')\n",
        "plt.legend()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "nry7h9kMdQQO",
        "outputId": "13902965-2398-45b0-810c-f9a76280cdad"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7dc4f56f76a0>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#(13)\n",
        "- We can also plot the training and validation loss using the below code. The characteristic shape of this curve shows a steep decrease in loss to start with, and then a more gradual decrease in loss subsequently. If our model is starting to overfit, the validation loss may start to increase again.\n",
        "\n",
        "**NB** – typically, training loss wouldn’t be so much higher than the validation loss like we see here. This is because of the class weighs we used in step 11, which are applied for the training dataset only and increase the value of the loss."
      ],
      "metadata": {
        "id": "txzJWDI7lIjE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "loss = history.history['loss']\n",
        "validation_loss = history.history['val_loss']\n",
        "\n",
        "plt.plot(loss, label='Training Set Loss')\n",
        "plt.plot(validation_loss, label='Validation St Loss')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Training  and Validation Loss Across Epochs')\n",
        "plt.legend()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "2PbaSYE-lbmY",
        "outputId": "43302ffd-a3ab-41ae-cb3a-ce0b8c503a2d"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7dc4f3b00fd0>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#(14)\n",
        "- **From Scikit Learn, we are going to import the confusion_matrix and classification_report functions which we can use to evaluate our model performance on the test data.**"
      ],
      "metadata": {
        "id": "GOGIPtWIoyZ0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix, classification_report"
      ],
      "metadata": {
        "id": "iWIm7RlzuB9j"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#(15)\n",
        "\n",
        " - We can use the predict function on our trained model to generate predictions for the test data. This will output three values for each observation, one for each of the output neurons. Since these are the probabilities that the observation belongs to each of the three classes, we want to pick the class which has the highest associated probability value. We can use the argmax function for this."
      ],
      "metadata": {
        "id": "0pZoqkz2uelX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = model.predict(x_test)\n",
        "y_pred = y_pred.argmax(axis=1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fTel3va2urPN",
        "outputId": "aaf175e3-a86a-4371-81cd-0a1f6ce895cd"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14/14 [==============================] - 0s 2ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#(16)\n",
        " - Use the confusion_matrix function to generate a confusion matrix using our generated predictions (y_pred) and the true class labels for the test data (y_test). We use a seaborn heatmap to visualise these results.."
      ],
      "metadata": {
        "id": "3izaU69kvOR2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ERROR On Page 19 of reaserach Paper\n",
        "\n",
        "- why running the Confusion_Matrix Function to generate a Prediction(y_Pred)\n",
        "\n",
        "#Error Description\n",
        "We encountered an Error is because you have named your variable confusion_matrix, which conflicts with the name of the confusion_matrix function from the sklearn.metrics module. You should use a different variable name to avoid this conflict. Here's the corrected code:\n",
        "\n",
        "**confusion_matrix_data = confusion_matrix(y_test, y_pred)**"
      ],
      "metadata": {
        "id": "u1_7SbtbxsyD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# Calculate the confusion matrix\n",
        "confusion_matrix_data = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "# Create a heatmap for the confusion matrix\n",
        "ax = sns.heatmap(confusion_matrix_data, cmap='flare', annot=True, fmt='d')\n",
        "\n",
        "plt.xlabel(\"Predicted Class\", fontsize=12)\n",
        "plt.ylabel(\"True Class\", fontsize=12)\n",
        "plt.title(\"Confusion Matrix\", fontsize=12)\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        },
        "id": "SQMzKOSJvfvY",
        "outputId": "e00e2cad-732c-48e4-9a73-af624831bbb7"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#(17)\n",
        " -Finally, we can use the classification_report function to view some key evaluation metrics for this model..."
      ],
      "metadata": {
        "id": "6syP4RQuy_wJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(classification_report(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PLmKgWGHzHOz",
        "outputId": "dd332515-eaa3-4367-87be-9bbb645c32e7"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      0.86      0.92       332\n",
            "           1       0.56      0.92      0.70        59\n",
            "           2       0.74      0.80      0.77        35\n",
            "\n",
            "    accuracy                           0.87       426\n",
            "   macro avg       0.76      0.86      0.79       426\n",
            "weighted avg       0.90      0.87      0.88       426\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#(18)\n",
        "Imagine that this model was going to be used to screen pregnancies to identify those which need further medical attention. In this hypothetical scenario, it is important that as many Suspect and Pathologic cases are identified as possible. Given this, what evaluation metric(s) would you recommend using to compare the performance of different models?\n",
        "\n",
        "\n",
        "n a scenario where the model is used to screen pregnancies to identify those which need further medical attention, it is crucial to prioritize the identification of Suspect and Pathologic cases, even if it means accepting a higher rate of false positives. This is because the cost of missing such cases could have serious consequences for the health of both the mother and the baby.\n",
        "\n",
        "To evaluate and compare the performance of different models in this context, the following evaluation metrics are recommended:\n",
        "\n",
        "**Recall (Sensitivity or True Positive Rate)**: Recall is the ratio of true positive cases to the total actual positive cases. In this scenario, it is essential to maximize the recall for the Suspect (1) and Pathologic (2) classes. A higher recall means a higher proportion of these high-risk cases are correctly identified.\n",
        "\n",
        "**F1-Score:** The F1-Score is the harmonic mean of precision and recall. It provides a balanced measure of the model's performance, taking both false positives and false negatives into account. It is especially useful when the classes are imbalanced, as it helps balance precision and recall.\n",
        "\n",
        "\n",
        "**Specificity (True Negative Rate):** Specificity is the ratio of true negative cases to the total actual negative cases. While it's important to identify high-risk cases, it's also essential not to falsely label healthy pregnancies as high risk. Maximizing specificity helps reduce false alarms for healthy pregnancies.\n",
        "\n",
        "**Accuracy:** Although accuracy is not the primary metric of concern in this scenario, it can still be informative. It gives an overall measure of how well the model performs across all classes. However, it should not be the sole criterion for model evaluation, especially when class imbalances are present.\n",
        "\n",
        "**Receiver Operating Characteristic (ROC) Curve and Area Under the Curve (AUC):** The ROC curve and AUC provide a visual and quantitative assessment of the model's ability to distinguish between classes. A higher AUC indicates better discrimination between high-risk and low-risk pregnancies.\n",
        "\n",
        "**Positive Predictive Value (Precision):** Precision is the ratio of true positive cases to all predicted positive cases. While not the primary metric, it's still essential to consider the precision for the Suspect and Pathologic classes to minimize unnecessary medical interventions.\n",
        "\n",
        "   **IN CONCLUSION**\n",
        "\n",
        "when screening pregnancies to identify those in need of further medical attention, the primary focus should be on maximizing recall and F1-Score for the high-risk classes (Suspect and Pathologic), while also considering specificity to minimize false alarms. These metrics will help ensure that as many at-risk pregnancies are correctly identified as possible, with a balance between minimizing false negatives and false positives."
      ],
      "metadata": {
        "id": "-dBBCz10zfGX"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "s5mUblJfznJR"
      },
      "execution_count": 67,
      "outputs": []
    }
  ]
}
